{"version":3,"sources":["components/Contacts/contacts.module.css","../node_modules/phone-formatter/index.js","redux/phonebook/phonebook-operations.js","components/Form/Form.js","redux/phonebook/phonebook-selectors.js","components/Contacts/Contacts.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","normalize","phoneNumber","replace","format","formatString","options","this","i","l","length","axios","defaults","baseURL","name","number","dispatch","getState","contact","addContactRequest","contacts","phonebook","normalizedName","toLowerCase","find","alert","fetchContactSuccess","post","then","data","addContactSuccess","catch","err","addContactError","message","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactRequest","get","fetchContactError","s","form","display","flexDirection","marginBottom","width","input","Form","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","onSubmit","formReset","style","TextField","label","variant","type","pattern","title","required","onChange","Button","color","Component","connect","ContactOperations","getLoading","loading","getError","error","getFilter","filter","getFilteredContacts","createSelector","normalizedFilter","includes","phoneFormatter","require","selectors","onDeleteContact","operations","map","className","contactItem","onClick","Filter","actions","defaultProps","ContactsView","fetchContact","isLoading","isError"],"mappings":"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","file":"static/js/4.1e4faf0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"contacts_contactItem__3yDG5\",\"number\":\"contacts_number__1wI9j\"};","module.exports = {\n  \n  normalize: function extract(phoneNumber) {\n\n    return phoneNumber.replace(\n      /^[\\+\\d{1,3}\\-\\s]*\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n      \"$1$2$3\"\n    );\n\n  },\n\n  format: function format(phoneNumber, formatString, options) {\n\n    // Normalize the phone number first unless not asked to do so in the options\n    if (!options || !options.normalize) {\n      phoneNumber = this.normalize(phoneNumber)\n    };\n\n    for ( var i = 0, l = phoneNumber.length; i < l; i++ ) {\n      formatString = formatString.replace(\"N\", phoneNumber[i]);\n    }\n  \n    return formatString;\n\n  },\n\n};\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './phonebook-actions.js';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst addContact = (name, number) => (dispatch, getState) => {\r\n  const contact = { name, number };\r\n  dispatch(addContactRequest());\r\n  const state = getState();\r\n  const contacts = state.phonebook.contacts;\r\n  const normalizedName = name.toLowerCase();\r\n  if (contacts.find(contact => contact.name.toLowerCase() === normalizedName)) {\r\n    alert(`${name} is already in contacts`);\r\n    dispatch(fetchContactSuccess());\r\n    return;\r\n  }\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(err => dispatch(addContactError(err.message)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(err => dispatch(deleteContactError(err.message)));\r\n};\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(err => dispatch(fetchContactError(err.message)));\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactOperations from '../../redux/phonebook/phonebook-operations';\r\nimport { Button } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst s = {\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 40,\r\n    width: 600,\r\n  },\r\n\r\n  input: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 10,\r\n  },\r\n};\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const number = this.state.number;\r\n    const name = this.state.name;\r\n    this.props.onSubmit(name, number);\r\n\r\n    this.formReset();\r\n  };\r\n\r\n  formReset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} style={s.form}>\r\n        <TextField\r\n          style={s.input}\r\n          label=\"Name\"\r\n          variant=\"filled\"\r\n          value={this.state.name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <TextField\r\n          style={s.input}\r\n          label=\"Number\"\r\n          variant=\"filled\"\r\n          value={this.state.number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Add contact\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(ContactOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.phonebook.loading;\r\nexport const getError = state => state.phonebook.error;\r\nexport const getFilter = state => state.phonebook.filter;\r\nexport const getContacts = state => state.phonebook.contacts;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, contacts) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport s from './contacts.module.css';\r\nimport operations from '../../redux/phonebook/phonebook-operations';\r\nimport * as selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst phoneFormatter = require('phone-formatter');\r\n\r\nconst Contacts = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <li className={s.contactItem} key={contact.id}>\r\n          <span>{contact.name}:</span>\r\n          <span className={s.number}>\r\n            {phoneFormatter.format(contact.number, 'NNN-NN-NN')}\r\n          </span>\r\n          <Button color=\"primary\" onClick={() => onDeleteContact(contact.id)}>\r\n            Delete\r\n          </Button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: selectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport * as actions from '../../redux/phonebook/phonebook-actions';\r\nimport * as selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst s = {\r\n  input: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 30,\r\n    width: 500,\r\n  },\r\n};\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <TextField\r\n    style={s.input}\r\n    label=\"Find contacts by name\"\r\n    variant=\"filled\"\r\n    type=\"text\"\r\n    value={value}\r\n    onChange={onChange}\r\n  />\r\n);\r\nconst mapStateToProps = state => ({ value: selectors.getFilter(state) });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(actions.filterChange(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.defaultProps = {\r\n  value: '',\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport operations from '../redux/phonebook/phonebook-operations';\r\nimport Form from '../components/Form';\r\nimport Contacts from '../components/Contacts';\r\nimport Filter from '../components/Filter';\r\nimport * as selectors from '../redux/phonebook/phonebook-selectors';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContact();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"containerApp\">\r\n        <h1>Phonebook</h1>\r\n        <Form />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <Contacts />\r\n        {this.props.isLoading && <h2>Loading ... </h2>}\r\n        {this.props.isError && <h2>Something wrong :( </h2>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: selectors.getLoading(state),\r\n  isError: selectors.getError(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContact: () => dispatch(operations.fetchContact()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}